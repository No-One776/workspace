package gvprojects.superttt.model;

import gvprojects.sttt.model.CellState;
import gvprojects.sttt.model.GameStatus;
import gvprojects.sttt.model.ISuperTicTacToeModel;

/**
 * The model for the Super Tic Tac Toe to run off of.
 * 
 * @author Justin Rohr
 * @version 1/30/13 Winter 2013
 * @param <board>
 */

public class SuperTicTacToeModel<board> implements ISuperTicTacToeModel {
	CellState[][] board;
	private int playerturn, win_length;;

	public SuperTicTacToeModel(int r, int c, int win_length) {
		// if (r == (Integer) null || c == (Integer) null)
		// throw new IllegalArgumentException("Rows or Columns can be null!");
		checkRowsandCols(r, c);
		board = new CellState[r][c];
		setCellsEmpty();

		if (win_length > r || win_length > c || win_length < 1)
			throw new IllegalArgumentException(
					"Win length can't be longer than the board or zero!");
		this.win_length = win_length;
		playerturn = 0;

	}

	private void setCellsEmpty() {
		for (int r = 0; r < board.length; r++) {
			for (int j = 0; j < board[r].length; j++) {
				board[r][j] = CellState.EMPTY;
			}

		}
	}

	public CellState cellStatus(int r, int c) {
		return board[r][c];
	}

	public int numColumns() {
		return board[0].length;
	}

	public int numRows() {
		return board.length;
	}

	public void reset() {
		board = new CellState[0][0];
		win_length = 0;
		playerturn = 0;
	}

	public void select(int r, int c) {
		checkRowsandCols(r, c);
		if (checkForSpotFilled(r, c) == true)
			throw new IllegalArgumentException("That Spot is filled!");

		if (playerturn % 2 == 0)
			board[r][c] = CellState.X;
		else
			board[r][c] = CellState.O;
		playerturn++;
	}

	private boolean checkForSpotFilled(int r, int c) {
		if (board[r][c] == CellState.EMPTY)
			return false;
		else
			return true;
	}

	private void checkRowsandCols(int r, int c) {
		if (r < 0 || r > 50 || c < 0 || c > 50)
			throw new IllegalArgumentException("Invalid Input");
	}

	public GameStatus status() {
		checkForWin(board, win_length);

		return GameStatus.IN_PROGRESS;
	}

	// public static int findMinInt(int[] array) {
	// int b = array[0];
	// for (int a = 1; a <= array.length; a++) {
	// if (b > array[a])
	// b = array[a];
	// }
	// return b;
	// }
	//
	// public static String findMinString(String[] array) {
	// String str = array[0];
	// for (int n = 1; n <= array.length; n++) {
	// if (str.compareTo(array[n]) > 0)
	// str = array[n];
	// }
	//
	// return str;
	// }

	// public static <T extends Comparable<T>> T findMinObject(T[] array) {
	// T str = array[0];
	// for (int n = 1; n <= array.length; n++) {
	// if (str.compareTo(array[n]) > 0)
	// str = array[n];
	// }
	//
	// return str;
	// }
	
	exit.addActionListener(new ActionListener(){
		public void actionPerformed(AtionEvent e){
			System.exit(0);
		}
	}
	)
	// private void copyBoard(CellState[][] b, int win){
	// CellState[][] copy = board;
	// checkForWin(copy, win);
	// }

	public static Object[] checkForWin(CellState[][] game_board, int i) {
		int count = 0;
		// Checks Columns for win
		for (int r = 0; r < game_board.length; r++) {
			for (int c = 0; c < game_board[r].length; c++) {
				if (game_board[r][c] == CellState.X)
					count++;
				if (game_board[r][c] == CellState.EMPTY)
					count = 0;
				if (count == i) {
					return null;
				}
			}
		}
		for (int r = 0; r < game_board.length; r++) {
			for (int c = 0; c < game_board[r].length; c++) {
				if (game_board[r][c] == CellState.O)
					count++;
				if (game_board[r][c] == CellState.EMPTY)
					count = 0;
				if (count == i) {
					return game_board[count];
				}
			}
		}

		return null;
	}
}

package gvprojects.countdowntimer;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Scanner;

/**
 * @Author Justin Rohr
 * @version 1/15/13 Winter 2013 This project models a count down timer.
 */

public class CountDownTimer {
	int hours, minutes, seconds;
	static int count;

	static int totalSeconds(int hours, int minutes, int seconds) {
		if (hours < 0 || seconds < 0 || minutes < 0)
			throw new IllegalArgumentException("Invalid Time");

		return (hours * 60) * 60 + minutes * 60 + seconds;
	}

	public CountDownTimer(int hours, int minutes, int seconds) {
		this.hours = hours;
		this.minutes = minutes;
		this.seconds = seconds;

		if (hours < 0 || seconds < 0 || minutes < 0)
			throw new IllegalArgumentException("Invalid Time");

		count++;
	}

	public CountDownTimer(int minutes, int seconds) {
		this.minutes = minutes;
		this.seconds = seconds;

		if (seconds < 0 || minutes < 0)
			throw new IllegalArgumentException("Invalid Time");

		count++;
	}

	public CountDownTimer(int seconds) {
		this.seconds = seconds;

		if (seconds < 0)
			throw new IllegalArgumentException("Negative Seconds Time Input");

		count++;
	}

	public CountDownTimer() {
		hours = 0;
		minutes = 0;
		seconds = 0;

		count++;
	}

	public CountDownTimer(CountDownTimer other) {
		this.hours = other.getHours();
		this.minutes = other.getMinutes();
		this.seconds = other.getSeconds();
	}

	public CountDownTimer(String startTime) {
		String[] parts = startTime.split(":");
		if (parts.length == 4) {
			throw new IllegalArgumentException(
					"Invalid Time String is too long");
		}

		if (parts.length == 3) {
			hours = Integer.parseInt(parts[0]);
			minutes = Integer.parseInt(parts[1]);
			seconds = Integer.parseInt(parts[2]);
		} else if (parts.length == 2) {
			minutes = Integer.parseInt(parts[0]);
			seconds = Integer.parseInt(parts[1]);
		} else
			seconds = Integer.parseInt(parts[0]);

		if (hours < 0 || seconds < 0 || minutes < 0)
			throw new IllegalArgumentException("Invalid Time String");
	}

	public int totalSeconds() {
		return (hours * 60) * 60 + minutes * 60 + seconds;
	}

	public boolean equals(Object other) {
		CountDownTimer other1 = new CountDownTimer(other.toString());

		if (this.hours == other1.getHours()
				&& this.minutes == other1.getMinutes()
				&& this.seconds == other1.getSeconds())
			return true;
		else
			return false;
	}

	public int compareTo(CountDownTimer other) {
		return (this.totalSeconds() - other.totalSeconds());
	}

	private void rolloverTime(int seconds) {
		if (this.seconds < seconds && minutes == 0 && hours != 0) {
			this.hours--;
			this.minutes += 59;
			this.seconds += 60;
		}
		if (this.seconds < seconds && minutes != 0) {
			minutes--;
			this.seconds += 60;
		}

		subtract(seconds);
	}

	public void subtract(int seconds) {
		if (seconds < 0)
			throw new IllegalArgumentException("Invalid Time");
		else if (this.seconds < seconds)
			rolloverTime(seconds);
		else
			this.seconds -= seconds;
	}

	public void dec() {
		if (hours == 0 && minutes == 0 && seconds < 1)
			throw new IllegalArgumentException("Seconds cannot be less than 0");
		else if (this.seconds < 1)
			rolloverTime(1);
		else
			this.seconds--;
	}

	public void save(String filename) throws IOException {
		FileWriter writer = new FileWriter(filename);
		BufferedWriter out = new BufferedWriter(writer);
		out.write(this.toString());
		out.close();
	}

	public void load(String filename) throws FileNotFoundException {
		Scanner filescan = new Scanner(new File(filename));
		CountDownTimer time = new CountDownTimer(filescan.next());
		filescan.close();
		this.hours = time.getHours();
		this.minutes = time.getMinutes();
		this.seconds = time.getSeconds();
	}

	public static int getNumberCreated() {
		return count;
	}

	public String toString() {
		String helper = hours + ":";

		if (minutes > 9)
			helper += minutes + ":";
		else if (minutes == 0)
			helper += "00:";
		else
			helper += "0" + minutes + ":";

		if (seconds > 9)
			helper += seconds;
		else if (seconds == 0)
			helper += "00";
		else
			helper += "0" + seconds;

		return helper;
	}

	public int getHours() {
		return hours;
	}

	public int getMinutes() {
		return minutes;
	}

	public int getSeconds() {
		return seconds;
	}

	public static void main(String[] args) {
		PassFailTestRunner.run(new String[] { "1" });
	}
}
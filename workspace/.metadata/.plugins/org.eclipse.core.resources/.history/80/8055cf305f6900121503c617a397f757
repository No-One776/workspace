package gvprojects.countdowntimer;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Scanner;

/**
 * This project models a Count Down Timer that can get input and accurately
 * count down from a set time and throws exceptions when necessary
 * 
 * @Author Justin Rohr
 * @version 1/24/13 Winter 2013
 */

public class CountDownTimer {
	//Instance variables
	int hours, minutes, seconds;
	static int count = 0;

	// Static method to return the total seconds of given parameter
	public static int totalSeconds(int hours, int minutes, int seconds) {
		if (hours < 0 || seconds < 0 || minutes < 0)
			throw new IllegalArgumentException("Invalid Time");

		return (hours * 60) * 60 + minutes * 60 + seconds;
	}

	// Makes a countdowntimer with specified seconds, minutes, and hours
	public CountDownTimer(int hours, int minutes, int seconds) {
		this.hours = hours;
		this.minutes = minutes;
		this.seconds = seconds;

		validate(this.hours, this.minutes, this.seconds);

		count++;
	}

	
	/**
	 * Makes a countdowntimer with specified seconds and minutes
	 * 
	 * @param minutes 
	 * @param seconds
	 */
	public CountDownTimer(int minutes, int seconds) {
		this.minutes = minutes;
		this.seconds = seconds;

		validate(this.hours, this.minutes, this.seconds);

		count++;
	}

	// Makes a countdowntimer with specified seconds
	public CountDownTimer(int seconds) {
		this.seconds = seconds;

		validate(this.hours, this.minutes, this.seconds);
		count++;
	}

	// Resets the CountDownTimer values to zero
	public CountDownTimer() {
		hours = 0;
		minutes = 0;
		seconds = 0;

		count++;
	}

	// Constructor that loads another countdowntimer into this one
	public CountDownTimer(CountDownTimer other) {
		this.hours = other.getHours();
		this.minutes = other.getMinutes();
		this.seconds = other.getSeconds();

		validate(this.hours, this.minutes, this.seconds);
		count++;
	}

	// Constructor that takes the String startTime and turns it into a timer
	public CountDownTimer(String startTime) {
		String[] parts = startTime.split(":");

		// Checks to validate a timer ending in a : to pass an error
		int j, k = 0;
		for (j = 0; j < startTime.length(); j++) {
			if (startTime.charAt(j) == ':')
				k++;
		}
		if (k > 0 && parts.length == 1)
			throw new IllegalArgumentException("Invalid Input");

		// Checks for a startTime string with no data values and passes a error
		if (startTime == ":::" || startTime == "::" || startTime == ":"
				|| startTime == null)
			throw new IllegalArgumentException("Invalid Input");

		// Checks for a string input that is too long
		if (parts.length >= 4) {
			throw new IllegalArgumentException(
					"Invalid Time String is too long");
		}

		// Takes the Array parts after validation and passes it through to timer
		// values
		if (parts.length == 3) {
			hours = Integer.parseInt(parts[0]);
			minutes = Integer.parseInt(parts[1]);
			seconds = Integer.parseInt(parts[2]);
		} else if (parts.length == 2) {
			minutes = Integer.parseInt(parts[0]);
			seconds = Integer.parseInt(parts[1]);
		} else if (parts.length == 1)
			seconds = Integer.parseInt(parts[0]);
		else {
			hours = 0;
			minutes = 0;
			seconds = 0;
		}

		// Validates the timer values
		validate(this.hours, this.minutes, this.seconds);

		count++;
	}

	// Validates timer values for negative or above 59 minutes or seconds
	public static void validate(int h, int m, int s) {
		if (h < 0 || s < 0 || m < 0)
			throw new IllegalArgumentException("Invalid Time");
		if (m > 59 || s > 59)
			throw new IllegalArgumentException("Invalid Time");
	}

	// Returns the total seconds of the timer
	public int totalSeconds() {
		return (hours * 60) * 60 + minutes * 60 + seconds;
	}

	// Tests to see if the other timer object is equal to this timer.
	public boolean equals(Object other) {
		// Checks that other is a form of CountDownTimer
		if (!(other instanceof CountDownTimer))
			return false;

		// Passes the object to a count down timer variable
		CountDownTimer other1 = new CountDownTimer(other.toString());

		// Checks the two timers for equality
		if (this.hours == other1.getHours()
				&& this.minutes == other1.getMinutes()
				&& this.seconds == other1.getSeconds())
			return true;
		else
			return false;
	}

	// Compares this timer to another given timer
	public int compareTo(CountDownTimer other) {
		return (this.totalSeconds() - other.totalSeconds());
	}

	// Helper method that rolls over hours and minutes to seconds
	private void rolloverTime(int seconds) {
		// Checks to see if there are enough seconds to be subtracted and any
		// minutes to roll down if there is not enough
		if (this.seconds < seconds && minutes == 0 && hours != 0) {
			this.hours--;
			this.minutes += 59;
			this.seconds += 60;
		}

		// Checks to see if there are enough seconds to subtract and if not,
		// rolls over a minute into seconds
		if (this.seconds < seconds && minutes != 0) {
			minutes--;
			this.seconds += 60;
		}

		subtract(seconds);
	}

	// Subtracts the given parameter of seconds from the timer
	public void subtract(int seconds) {
		// Checks to see if the subtract amount is larger than the timer
		if (seconds > this.totalSeconds())
			throw new IllegalArgumentException(
					"Cannot Subtract more than the timer");
		// Checks if seconds is negative
		if (seconds < 0)
			throw new IllegalArgumentException("Invalid Time");
		else if (this.seconds < seconds)
			rolloverTime(seconds);
		else
			this.seconds -= seconds;
	}

	// Decreases the timers seconds by one
	public void dec() {
		if (hours == 0 && minutes == 0 && seconds < 1)
			throw new IllegalArgumentException("Seconds cannot be less than 0");
		else if (this.seconds < 1)
			rolloverTime(1);
		else
			this.seconds--;
	}

	// Saves the current timer to the specified filename
	public void save(String filename) throws IOException {
		FileWriter writer = new FileWriter(filename);
		BufferedWriter out = new BufferedWriter(writer);
		out.write(this.toString());
		out.close();
	}

	// Loads the specified timer
	public void load(String filename) throws FileNotFoundException {
		Scanner filescan = new Scanner(new File(filename));
		CountDownTimer time = new CountDownTimer(filescan.next());
		filescan.close();
		this.hours = time.getHours();
		this.minutes = time.getMinutes();
		this.seconds = time.getSeconds();
	}

	// Returns the number of timers created
	public static int getNumberCreated() {
		return count;
	}

	// Returns the formatted string for the timer
	public String toString() {
		String helper = hours + ":";

		// Checks and adds an extra 0 if minutes is less than 9
		if (minutes > 9)
			helper += minutes + ":";
		else if (minutes == 0)
			helper += "00:";
		else
			helper += "0" + minutes + ":";

		// Checks and adds an extra 0 if seconds is less than 9
		if (seconds > 9)
			helper += seconds;
		else if (seconds == 0)
			helper += "00";
		else
			helper += "0" + seconds;

		return helper;
	}

	public int getHours() {
		return hours;
	}

	public int getMinutes() {
		return minutes;
	}

	public int getSeconds() {
		return seconds;
	}

	public static void main(String[] args) {
		PassFailTestRunner.run();
	}
}
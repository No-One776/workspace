package gvprojects.chess.model;

import static org.junit.Assert.*;

import org.junit.Test;

public class QueenTest extends ChessPieceTest {

	@Override
	protected IChessPiece make(Player p) {
		return new Queen(p);
	}

	@Override
	protected Move getValidMove(int row, int col) {
		return new Move(row, col, row + 1, col + 1);
	}

	private IChessPiece queen = make(Player.WHITE);

	// Verify that a rook can move across a row
	@Test
	public void canMoveInRow() throws Exception {
		board[1][1] = queen;
		assertTrue("Rook Test 1",
				queen.isValidMove(new Move(1, 1, 1, 6), board));
	}

	// Verify that a rook can move up and down a column
	@Test
	public void canMoveInColumn() throws Throwable {
		board[1][1] = queen;
		assertTrue("Rook Test 2",
				queen.isValidMove(new Move(1, 1, 6, 1), board));
	}

	// Verify that a rook cannot jump over otherqueens.
	@Test
	public void rowMustBeClear1() throws Throwable {
		board[2][2] = queen;
		board[3][2] = make();
		assertFalse("Rook Test 4",
				queen.isValidMove(new Move(2, 2, 4, 2), board));
	}

	@Test
	public void mustBeClearBackwards() throws Throwable {
		board[3][2] = queen;
		board[2][2] = make();
		board[3][3] = make();
		assertFalse("Rook Test 4",
				queen.isValidMove(new Move(3, 2, 1, 2), board));
		assertFalse("Rook Test 4-2",
				queen.isValidMove(new Move(3, 2, 3, 4), board));
	}

	@Test
	public void colMustBeClear1() throws Throwable {
		board[2][2] = queen;
		board[2][3] = make();
		assertFalse("Rook Test 4",
				queen.isValidMove(new Move(2, 2, 2, 4), board));
	}
}

/**
 * 
 */
package gvprojects.chess.model;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import org.junit.Test;

/**
 * @author Justin Rohr
 * 
 */
public class EngineTest {

	private Model engine = new Model();
	Move m = new Move(1, 1, 3, 1);

	@Test
	public void makesBoard() throws Throwable {
		engine = new Model();
	}

	@Test
	public void constructorSetsRowsColumnsCorrectly() throws Throwable {
		assertEquals(8, engine.numColumns());
		assertEquals(8, engine.numRows());
	}

	@Test
	public void playerIntiallyReturnsWhite() throws Throwable {
		assertEquals(Player.WHITE, engine.currentPlayer());
	}

	@Test
	public void gameSwitchesPlayers() throws Throwable {
		engine.move(new Move(7, 7, 6, 7));
		assertEquals(Player.BLACK, engine.currentPlayer());
	}

	@Test
	public void gameMovesPawn() throws Throwable {
		engine.move(new Move(6, 1, 4, 1));
		assertEquals("Pawn", engine.pieceAt(4, 1).name());
	}

	@Test(expected = NullPointerException.class)
	public void gamecannotMovePawnThreeSpots() throws Exception {
		engine.move(new Move(6, 1, 3, 1));
		assertEquals("Pawn", engine.pieceAt(6, 1).name());
	}

	@Test
	public void knightMove() throws Throwable {
		engine.move(new Move(7, 1, 4, 2));
		assertEquals("Knight", engine.pieceAt(4, 2).name());
	}

	@Test
	public void invalidKnightMove() throws Throwable {
		engine.isValidMove(new Move(7, 1, 4, 4));
		assertEquals(null, engine.pieceAt(4, 4));
		assertEquals("Knight", engine.pieceAt(7, 1).name());
	}

	@Test
	public void checkGame() throws Throwable {
		// // Pawns up and take each other out
		// engine.move(new Move(6, 4, 4, 4));// W
		// engine.move(new Move(1, 4, 3, 4));// B
		// engine.move(new Move(6, 5, 4, 5));// W
		// engine.move(new Move(1, 5, 3, 5));// B
		// engine.move(new Move(4, 4, 3, 4));// WP--BP
		// engine.move(new Move(3, 5, 4, 5));// BP--WP
		// engine.move(new Move(7, 4, 2, 4));// WQ

		engine.move(new Move(7, 4, 1, 5));
		assertTrue("Check test", engine.inCheck(Player.BLACK));
		engine.move(new Move(0, 5, 5, 5));
		engine.move(new Move(1, 5, 6, 4));
		assertFalse("Check test 1", engine.inCheck(Player.BLACK));
//		engine.move(new Move(1, 4, 1, 6));
//		assertTrue("Check test", engine.inCheck(Player.BLACK));
//		engine.move(new Move(1, 6, 1, 3));
//		assertTrue("Check test", engine.inCheck(Player.BLACK));
//		engine.move(new Move(1, 3, 2, 2));
//		assertTrue("Check test", engine.inCheck(Player.BLACK));
//		engine.move(new Move(2, 2, 3, 4));
//		assertEquals("Queen", engine.pieceAt(1, 5).name());
	}

	@Test
	public void checkMate() throws Throwable {

	}

}

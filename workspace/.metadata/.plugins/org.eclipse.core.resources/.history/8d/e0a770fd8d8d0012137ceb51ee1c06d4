package gvprojects.chess.model;

public class Rook extends ChessPiece {

	public Rook(Player p) {
		super(p, "Rook");
	}

	@Override
	public boolean isValidMove(Move m, IChessPiece[][] p) {
		if (m.toRow != m.fromRow && m.toColumn != m.fromColumn)
			return false;
		if (super.isValidMove(m, p) == false)
			return false;
		boolean row = (m.fromRow != m.toRow && checkRow(m, p));
		// boolean col = (m.toColumn != m.fromColumn && checkCol(m, p));
		// if (row == true || col == true)
		return row;
		//return ((/**m.fromRow != m.toRow */ checkRow(m, p)) || (/**m.toColumn != m.fromColumn &&*/ checkCol(
		//		m, p)));
		
		// return true;

		// return false;
	}

	private boolean checkCol(Move m, IChessPiece[][] p) {
		if (p[m.toRow][m.toColumn] != null
				&& p[m.toRow][m.toColumn].player() == p[m.fromRow][m.fromColumn]
						.player())
			return false;
		// Checks from your position to the spot before your move to be empty
		if (m.fromRow < m.toRow) {
			for (int x = m.fromRow; x < m.toRow; x++)
				if (p[x][m.fromColumn] != null)
					return false;
		} else
			for (int x = m.toRow + 1; x > m.toRow; x--)
				if (p[x][m.fromColumn] != null)
					return false;

		return true;
	}

	private boolean checkRow(Move m, IChessPiece[][] p) {
		System.out.println("HERE1: " + p[m.fromRow][m.fromColumn]);
		if (p[m.toRow][m.toColumn] != null
				&& p[m.toRow][m.toColumn].player() == p[m.fromRow][m.fromColumn]
						.player())
			return false;
		// Checks from your position to the spot before your final spot to be
		// empty
		if (m.fromColumn < m.toColumn) {
			for (int y = m.fromColumn; y < m.toColumn; y++) {
				System.out.println("HERE2: " + p[m.fromRow][y]);
				if (p[m.fromRow][y] != null) {
					System.out.println("HERE2");
					return false;
				}
			}
		} else
			System.out.println("HERE3: " + p[m.fromRow][m.fromColumn]);
			for (int y = m.toColumn + 1; y > m.fromColumn; y--)
				if (p[m.fromRow][y] != null)
					return false;

		return true;
	}

}
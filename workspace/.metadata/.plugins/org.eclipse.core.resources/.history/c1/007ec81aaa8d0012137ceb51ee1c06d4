package gvprojects.chess.model;

import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import org.junit.Test;

/**
 * Tests for the Pawn Chess Piece
 * 
 * @author rohrj
 * 
 */
public class PawnTest extends ChessPieceTest {
	
	@Override
	protected IChessPiece make(Player p) {
		return new Pawn(p);
	}
	
	private IChessPiece piece = make(Player.BLACK);
	private IChessPiece white = make(Player.WHITE);

	@Override
	protected Move getValidMove(int row, int col) {
		int newRow = row + 1;
		if (newRow >= board.length) {
			newRow = row - 1;
		}
		return new Move(row, col, newRow, col);
	}

	@Test
	public void canMoveTwoSpotsFirstMove() throws Throwable {
		board[1][1] = piece;
		assertTrue("Pawn Test 1",
				piece.isValidMove(new Move(1, 1, 3, 1), board));
	}

	@Test
	public void cannotMoveTwoSpotsSecondMove() throws Throwable {
		board[1][1] = piece;
		piece.isValidMove(new Move(1, 1, 1, 3), board);
		board[1][3] = piece;
		assertFalse("Pawn Test 2",
				piece.isValidMove(new Move(1, 3, 1, 6), board));
	}

	@Test
	public void canCaptureDiagonalPiece() throws Throwable {
		board[1][1] = piece;
		board[2][2] = white;
		assertTrue("Pawn Test 3",
				piece.isValidMove(new Move(1, 1, 2, 2), board));
	}

	@Test
	public void cannotMoveOverPiece() throws Throwable {
		board[1][1] = piece;
		board[2][1] = white;
		assertFalse("Pawn Test 4",
				piece.isValidMove(new Move(1, 1, 3, 1), board));
	}

	@Test
	public void cannotMoveSideways() throws Throwable {
		board[1][1] = piece;
		assertFalse("Pawn Test 5",
				piece.isValidMove(new Move(1, 1, 1, 2), board));
		assertFalse("Pawn Test 5-2",
				piece.isValidMove(new Move(1, 1, 1, 0), board));
	}

	@Test
	public void cannotMoveBackwards() throws Throwable {
		board[4][1] = piece;
		assertFalse("Pawn Test 6",
				piece.isValidMove(new Move(4, 1, 3, 1), board));
		board[6][3] = piece;
		assertFalse("Pawn Test 6-2",
				piece.isValidMove(new Move(6, 3, 5, 3), board));
	}

	@Test
	public void whitePawnCanMoveForwards() throws Throwable {
		board[6][1] = white;
		assertTrue("Pawn Test 7", white.isValidMove(new Move(6, 1, 4, 1), board));
	}

	@Test
	public void whitePawnCannotMoveBack() throws Throwable {
		board[4][1] = white;
		assertFalse("Pawn Test 8", white.isValidMove(new Move(4, 1, 5, 1), board));
	}
	
	@Test
	public void cannotMoveDiagonal() throws Throwable {
		board[1][1] = piece;
		assertFalse("Pawn Test 9",
				piece.isValidMove(new Move(1, 1, 2, 2), board));
		assertFalse("Pawn Test 9-2",
				piece.isValidMove(new Move(1, 1, 1, 0), board));
	}
}
